#!/bin/bash

# Variables
subdir=""
dockerdir=/home/chia/docker
env_file=$dockerdir/.env
docker_compose_file=$dockerdir/node_chia.yml
xch_plots_subdir="/chia"
gigahorse_plots_subdir="/gigahorse"


# Color codes for text output
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"


# Function to print the script's usage instructions
print_usage() {
    echo  "Usage:"
    echo "./composerize --mount-dir /path/to/dir [--subdir subdir_name]"
    echo "or"
    echo "./composerize --label CHIA [--subdir subdir_name]"
}


# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --mount-dir)
            mount_dir="$2"
            shift 2
            ;;
        --label)
            label="$2"
            shift 2
            ;;
        --subdir)
            subdir="$2"
            shift 2
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit 1
            ;;
    esac
done


# Check if both --mount-dir and --label are missing or both are provided, and print usage instructions accordingly
if [ -z "$mount_dir" ] && [ -z "$label" ]; then
    print_usage
    exit 1
fi

if [ -n "$mount_dir" ] && [ -n "$label" ]; then
    echo "Error: Both --mount-dir and --label cannot be used at the same time."
    print_usage
    exit 1
fi


# Find destination disks and directories based on input arguments
if [ -n "$mount_dir" ]; then
    dest_disks=$(find "$mount_dir" -mindepth 1 -maxdepth 1 -type d -exec findmnt --noheadings --output SOURCE --mountpoint {} \; | sort | uniq | tr '\n' ' ')
    dest_dirs=$(find "$mount_dir" -mindepth 1 -maxdepth 1 -type d | sed "s|$|/$subdir|" | tr '\n' ' ')
elif [ -n "$label" ]; then
    dest_disks=$(df -h | grep -E "^/dev/.*$label" | awk '{print $1}' | sort | uniq)
    dest_dirs=$(df -h | grep -E "^/dev/.*$label" | awk -v s="$subdir" '{print $6"/"s}' ORS=' ')
fi


# Function to generate a list of devices for the Docker Compose file
generate_devices_list() {
    local devices_list=""
    for device in $dest_disks; do
        device_without_partition=$(echo "$device" | sed 's/[0-9]*$//')
        devices_list+="            - $device_without_partition:$device_without_partition"$'\n'
    done
    echo "$devices_list"
}


# Function to generate a list of Chia plots directories for the .env file
generate_xch_plots_dir() {
    local xch_plots_dir=""
    IFS=' ' read -ra ADDR <<< "$dest_dirs"
    for disk_path in "${ADDR[@]}"; do
        xch_plots_dir+="/plots/$(basename $disk_path)$xch_plots_subdir:"
    done
    xch_plots_dir=${xch_plots_dir%:} # Remove the trailing colon
    echo "xch_plots_dir=$xch_plots_dir"
}


# Function to generate a list of Gigahorse plots directories for the .env file
generate_gigahorse_plots_dir() {
    local gigahorse_plots_dir=""
    IFS=' ' read -ra ADDR <<< "$dest_dirs"
    for disk_path in "${ADDR[@]}"; do
        gigahorse_plots_dir+="/plots/$(basename $disk_path)$gigahorse_plots_subdir:"
    done
    gigahorse_plots_dir=${gigahorse_plots_dir%:} # Remove the trailing colon
    echo "gigahorse_plots_dir=$gigahorse_plots_dir"
}


# Function to generate a list of Docker Compose files for the .env file
generate_compose_file_list() {
    compose_list=$(ls -1 $dockerdir/*.yml | while read -r line; do printf '%s\n' "$line"; done)
    compose=$(paste -s -d ':' <<<"$compose_list")
    echo "COMPOSE_FILE=$compose"
}


# Function to update the .env file with new values
update_env_file() {
    local xch_plots_dir=$(generate_xch_plots_dir)
    local gigahorse_plots_dir=$(generate_gigahorse_plots_dir)
    local compose_file=$(generate_compose_file_list)
    local hostname_entry="hostname=$(hostname)"
    local dockerdir_entry="dockerdir=$dockerdir"
    local timezone_entry="timezone=$(cat /etc/timezone)"
    local local_ip_entry="lanip=$(hostname -I | awk '{print $1}')"
    
    if grep -q "xch_plots_dir=" "$env_file"; then
        sed -i "s|xch_plots_dir=.*|${xch_plots_dir}|" "$env_file"
    else
        echo "$xch_plots_dir" >> "$env_file"
    fi
    if grep -q "gigahorse_plots_dir=" "$env_file"; then
        sed -i "s|gigahorse_plots_dir=.*|${gigahorse_plots_dir}|" "$env_file"
    else
        echo "$gigahorse_plots_dir" >> "$env_file"
    fi
    if grep -q "COMPOSE_FILE=" "$env_file"; then
        sed -i "s|COMPOSE_FILE=.*|${compose_file}|" "$env_file"
    else
        echo "$compose_file" >> "$env_file"
    fi
    if grep -q "hostname=" "$env_file"; then
        sed -i "s|hostname=.*|${hostname_entry}|" "$env_file"
    else
        echo "$hostname_entry" >> "$env_file"
    fi
    if grep -q "dockerdir=" "$env_file"; then
        sed -i "s|dockerdir=.*|${dockerdir_entry}|" "$env_file"
    else
        echo "$dockerdir_entry" >> "$env_file"
    fi
    if grep -q "timezone=" "$env_file"; then
        sed -i "s|timezone=.*|${timezone_entry}|" "$env_file"
    else
        echo "$timezone_entry" >> "$env_file"
    fi
    if grep -q "lanip=" "$env_file"; then
        sed -i "s|lanip=.*|${local_ip_entry}|" "$env_file"
    else
        echo "$local_ip_entry" >> "$env_file"
    fi
}






# Function to populate the docker-compose.yml file with the found devices list
update_docker_compose_file() {
    local devices_list=$(generate_devices_list)
    local devices_section_start=$(grep -n -E "^[[:space:]]*devices:" "$docker_compose_file" | cut -d ':' -f 1)
    local devices_section_end=$(grep -n -E -m 1 "^[[:space:]]*-(?![[:space:]]*/dev/)" <(tail -n +$((devices_section_start + 1)) "$docker_compose_file") | cut -d ':' -f 1 || echo -n "")

    if [[ -n "$devices_section_start" ]] && [[ -n "$devices_section_end" ]]; then
        devices_section_end=$((devices_section_start + devices_section_end - 2))
        sed -i -e "$((devices_section_start + 1)),$((devices_section_end))d" "$docker_compose_file"
    elif [[ -n "$devices_section_start" ]] && [[ -z "$devices_section_end" ]]; then
        devices_section_end=$(wc -l < "$docker_compose_file")
        sed -i -e "$((devices_section_start + 1)),$((devices_section_end))d" "$docker_compose_file"
    fi

    if [[ -n "$devices_section_start" ]]; then
        devices_list=$(echo "$devices_list" | sed 's/^[\t][\t] /            /')
        sed -i -e "${devices_section_start}r /dev/stdin" "$docker_compose_file" <<< "$devices_list"
    else
        echo "devices section not found in $docker_compose_file, appending at the end"
        echo -e "\n        devices:" >> "$docker_compose_file"
        devices_list=$(echo "$devices_list" | sed 's/^[\t][\t] /          /')
        echo "$devices_list" >> "$docker_compose_file"
    fi
}


# Main script
#generate_devices_list
update_env_file
update_docker_compose_file
#echo ""
cat $env_file
echo ""
echo ""
#cat $docker_compose_file