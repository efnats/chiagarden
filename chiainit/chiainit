#!/bin/bash

#requirements
#xfsprogs, smartmontools, ntfs-3g

XFSOPTIONS="-f -b size=1024"
EXT4OPTIONS="-F -m 0 -T largefile4"
NTFSOPTIONS="-f"
SERIALPREFIX="CHIA"

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"

VERSION="V2.1"
ACTION=""
FSTYPE=""

# Function to retrieve the serial number of a drive
get_serial_number() {
    drive=$1
    serial_number=$(sudo smartctl -i /dev/$drive | grep -i "Serial Number" | awk  '{ print $3 }')
    if [ -z "$serial_number" ]; then
        echo "UNKNOWN"
    else
        echo "$serial_number"
    fi
}


# Function to retrieve the UUID of a partition
get_uuid() {
    partition=$1
    uuid=$(sudo blkid -o value -s UUID /dev/$partition)
    if [ -z "$uuid" ]; then
        echo "UNKNOWN"
    else
        echo "$uuid"
    fi
}


# Function to get the filesystem type of a drive
get_fs_type() {
    partition=$1
    fs_type=$(sudo blkid -o value -s TYPE /dev/$partition)
    echo "$fs_type"
}


# Confirm destructive actions
confirm_destructive_action() {
    drives=$@
    echo -e "${RED}WARNING:${RESET} You have selected a destructive action (wipe, format, or init)."
    echo -e "${BOLD}THIS WILL DESTROY ALL YOUR DATA ON THE SPECIFIED DRIVE(S).${RESET}"
    for drive in "${drives[@]}"; do
        echo -e "${BOLD}${CYAN}$drive${RESET}"
    done
    echo ""
    echo "To proceed, type 'YES I SACRIFICE THIS DATA' and press Enter."
    read confirmation
    if [ "$confirmation" != "YES I SACRIFICE THIS DATA" ]; then
        echo "Operation canceled."
        exit 0
    fi
}


summarize_actions() {
    ntfs_warning=false
    echo
    echo -e ${BOLD}"Operation Summary"${RESET}
    echo -e "Drives     : ${BOLD}${DRIVES[@]}${RESET}"
    echo -e "Excluded   : ${BOLD}${EXCLUDED_LIST[@]}${RESET}"
    echo -e "Filesystem : ${BOLD}$FSTYPE${RESET}"
    echo -e "Actions    : ${BOLD}${ACTION#--}${RESET}"
    echo

    # Check if any of the drives have the ntfs filesystem and display a warning
    for drive in "${DRIVES[@]}"; do
        if [ "$FSTYPE" == "ntfs" ]; then
            ntfs_warning=true
            break
        fi
    done

    if [ "$ntfs_warning" = true ]; then
        echo -e "${RED}WARNING!!${RESET}${BOLD} There is a potential risk for data corruption when using NTFS-3G for Windows. DONT USE IT FOR YOUR FARM!!${RESET}"
        echo
    fi

    echo "Do you want to continue? (Y/n)"
    read -r user_choice
    if [[ ! "$user_choice" =~ ^[Yy]$ ]] && [[ ! -z "$user_choice" ]]; then
        echo "Operation canceled."
        exit 0
    fi
}


# Function to label a drive
label() {
    drive=$1
    partition=$2
    serial_number=$(get_serial_number "$drive")
    uuid=$(get_uuid "$partition")
    echo "  Serial Number: $serial_number"
    echo "  UUID: $uuid"
    
    if [ "$serial_number" == "UNKNOWN" ]; then
        serial_number=$uuid
    fi
    label="${SERIALPREFIX}-${serial_number}"
    FSTYPE=$(get_fs_type "$partition")

    case "$FSTYPE" in
        xfs)
            label=$(echo "$label" | cut -c 1-12)
            echo "  setting filesystem: xfs"
            sudo xfs_admin -L "$label" /dev/$partition
            ;;
        ext4)
            label=$(echo "$label" | cut -c 1-16)
            echo "  setting filesystem: ext4"
            sudo e2label /dev/$partition "$label"
            ;;
        ntfs)
            label=$(echo "$label" | cut -c 1-32)
            echo "  setting filesystem: ntfs"
            sudo ntfslabel /dev/$partition "$label"
            ;;
    esac
}


# Function to get the label of a drive
get_label() {
    partition=$1
    readlabel=""
    fs_type=$(get_fs_type "$partition")

    case "$fs_type" in
        xfs)
            readlabel=$(sudo xfs_admin -l /dev/$partition 2>/dev/null | awk '{print $3}')
            ;;
        ntfs)
            readlabel=$(sudo ntfslabel /dev/$partition 2>/dev/null)
            ;;
        ext4)
            readlabel=$(sudo e2label /dev/$partition 2>/dev/null)
            ;;
    esac
    echo "$readlabel"
}


# Function to wipe a drive
wipe() {
    drive=$1
    sudo wipefs -a /dev/$drive 2>&1
    #sudo dd if=/dev/zero of=/dev/$drive bs=1M count=100
}    

# Function to format a drive
format() {
    drive=$1
    if [ -z "$FSTYPE" ]; then
        return
    fi

    #echo -e "g\nn\n1\n\n\nw" | sudo fdisk /dev/$drive 2>&1
    partition="${drive}1"
    if [ "$FSTYPE" == "xfs" ]; then
        sudo parted /dev/$drive --script mklabel gpt mkpart primary xfs 0% 100%
        sudo sync
        sudo mkfs.xfs ${XFSOPTIONS} /dev/$partition 2>&1
    elif [ "$FSTYPE" == "ext4" ]; then
        sudo parted /dev/$drive --script mklabel gpt mkpart primary ext4 0% 100%
        sudo sync
        sudo mkfs.ext4 ${EXT4OPTIONS} /dev/$partition 2>&1
    elif [ "$FSTYPE" == "ntfs" ]; then
        sudo parted /dev/$drive --script mklabel gpt mkpart primary ntfs 0% 100%
        sudo sync
        sudo mkfs.ntfs ${NTFSOPTIONS} /dev/$partition 2>&1
    fi
}    


# Function to initialize a drive (wipe, format, and label)
init() {
    drive=$1
    execute_action "--wipe" $drive
    execute_action "--format" $drive
    execute_action "--label" $drive
}


# List all spinning drives in the system using lsblk and exclude ROM drives
get_drives() {
    lsblk -d -o name,rota,type | awk '$2 == "1" && $3 != "rom" {print $1}'
}


expand_drive_range() {
    local range="$1"

    # Split the input into prefix, start, and end
    local prefix="${range%%[a-z]*}"
    local range_without_prefix="${range#"$prefix"}"
    local start="${range_without_prefix%-*}"
    local end="${range##*-}"

    # Extract the last character of the start and end (e.g., "b" from "sdb")
    local start_char="${start: -1}"
    local end_char="${end: -1}"

    # Convert the characters into their ASCII values
    local start_ascii=$(printf '%d\n' "'$start_char")
    local end_ascii=$(printf '%d\n' "'$end_char")

    # Loop from start to end and print each drive in the range
    while [[ $start_ascii -le $end_ascii ]]; do
        echo "${prefix}${start:0:${#start}-1}$(printf \\$(printf '%03o' $start_ascii))"
        
        # Increment the ASCII value
        ((start_ascii++))
    done
}




# Function to check if a drive has a mounted root partition
is_system_drive() {
    drive=$1
    root_partition=$(df --output=source / | tail -1)
    echo $root_partition | grep -q "^/dev/${drive}[0-9]*"
    return $?
}


# Function to check if each specified drive exists
check_drives_exist() {
    for drive in "${DRIVES[@]}"; do
        if ! [ -b "/dev/${drive}" ]; then
            echo -e "${RED}Error:${RESET} Drive /dev/$drive does not exist."
            exit 1
        fi
    done
}


# Function to check if any of the specified drives are mounted
is_drive_mounted() {
    drive=$1
    grep -qs "/dev/${drive}[0-9]*" /proc/mounts
    return $?
}


# Check if fstype is issued for format or label action
function check_fstype_issued() {
if { [ "$ACTION" == "--format" ] || [ "$ACTION" == "--init" ]; } && [ -z "$FSTYPE" ]; then
    echo "Error: Missing filesystem type for format or label action."
    display_usage
    exit 1
fi
}


# Function to display the help text
help() {
    display_version
    display_help
}


# Display help text
display_help() {
    echo "Usage: chiainit [OPTIONS] drive1 drive2 ... driveN"
    echo "Mass-prepare hard drives for PoST farming"
    echo ""
    echo "Options:"
    echo "  --help                    : Show this help text"
    echo "  --wipe                    : Wipe the specified drives"
    echo "  --format                  : Format the specified drives (requires --fstype)"
    echo "  --label                   : Label the specified drives (fstype is auto-detected)"
    echo "  --init                    : Wipe, format, and label the specified drives (requires --fstype)"
    echo "  --fstype [xfs|ext4|ntfs]  : Specify the filesystem type"
    echo "  --label-prefix PREFIX     : Specify a custom prefix for the drive labels (default: CHIA)"
    echo "  --all                     : Operate on all drives (excluding system drive and mounted drives)"
    echo "  --exclude [drive1 drive2] : Exclude the specified drives from the operation"
    echo ""
    echo "Examples:"
    echo "  chiainit --label sdb sdc"
    echo "  chiainit --fstype ext4 --init sdb sdc"
    echo "  chiainit --fstype xfs --format sdb sdc"
    echo "  chiainit --fstype ext4 --label-prefix FARM --label sdb sdc"
    echo "  chiainit --all --fstype xfs --init"
}


# Display short help text
display_usage() {
    echo "Usage: chiainit [OPTIONS] drive1 drive2 ... driveN"
    echo "Example: chiainit --fstype ext4 --init sdb sdc"
}


display_version() {
    echo -e "${BOLD}${CYAN}ChiaInit ${VERSION}${RESET}"
}


# Spinner code
spinner() {
    local pid=$1
    local delay=0.05
    local spinstr='|/-\'
    while pgrep -x -P $pid > /dev/null; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
    echo -e "${GREEN}OK${RESET}"
}


# Execute action
execute_action() {
    action=$1
    drive=$2
    case "$action" in
        --init)
            echo -e "\n${BOLD}${CYAN}Drive /dev/$drive:${RESET}"
            init $drive
            ;;
        --wipe)
            echo -e "  ${YELLOW}Wiping /dev/$drive...${RESET}"
            wipe $drive
            ;;
        --format)
            echo -e "  ${YELLOW}Formatting /dev/$drive...${RESET}"
            format $drive
            ;;
        --label)
            echo -e "  ${YELLOW}Labeling /dev/${drive}1...${RESET}"
            partition="${drive}1"
            label $drive "$partition"
            drive_label=$(get_label "$partition")
            echo -e "  ${CYAN}New label: ${RESET}${drive_label}"
            ;;
    esac
}

declare -a drives=()

# Process the command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --wipe|--format|--label|--init)
            ACTION="$1"
            shift
            ;;
        --fstype)
            [[ "$2" =~ ^(xfs|ext4|ntfs)$ ]] && FSTYPE="$2" || { echo "Error: Unsupported filesystem type."; display_usage; exit 1; }
            shift 2
            ;;
        --label-prefix)
            SERIALPREFIX="$2"
            shift 2
            ;;
        --all)
            mapfile -t DRIVES < <(get_drives)
            shift
            ;;
        --exclude)
            while [[ "$#" -gt 1 && ! "$2" =~ ^-- ]]; do
                EXCLUDED_DRIVES+=("$2")
                shift 2
            done
            shift
            ;;
        --help)
            help
            exit 0
            ;;
        *)
            [ -z "$ACTION" ] && { display_usage; exit 1; }
            # Assume it's either a range or a drive
            echo "Processing argument: $1" >&2  # Debug line
            
            if [[ $1 == *-* ]]; then
                # It's a range
                for drive in $(expand_drive_range "$1"); do
                    echo "Adding drive: $drive to DRIVES array" >&2  # Debug line
                    DRIVES+=("$drive")
                done
            else
                # It's a single drive
                echo "Adding single drive: $1 to DRIVES array" >&2  # Debug line
                DRIVES+=("$1")
            fi
            shift
            ;;
    esac
done


# Initialize an array to store excluded drives
EXCLUDED_LIST=()
echo
# Filter out the system drive, mounted drives, and user-excluded drives
for i in "${!DRIVES[@]}"; do
    is_excluded=false
    if is_system_drive "${DRIVES[$i]}"; then
        echo -e "${YELLOW}INFO:${RESET} Drive ${BOLD}${DRIVES[$i]}${RESET} is a system drive. Excluding from operation."
        is_excluded=true
    elif is_drive_mounted "${DRIVES[$i]}"; then
        echo -e "${YELLOW}INFO:${RESET} Drive ${BOLD}${DRIVES[$i]}${RESET} is mounted. Excluding from operation."
        is_excluded=true
    elif [[ " ${EXCLUDED_DRIVES[*]} " == *"${DRIVES[$i]}"* ]]; then
        echo -e "${YELLOW}INFO:${RESET} Drive ${BOLD}${DRIVES[$i]}${RESET} is manually excluded. Excluding from operation."
        is_excluded=true
    fi

    if $is_excluded; then
        EXCLUDED_LIST+=("${DRIVES[$i]}")
    fi
done

check_fstype_issued
check_drives_exist
summarize_actions


# Check for and confirm destructive actions
if [ "$ACTION" == "--wipe" ] || [ "$ACTION" == "--format" ] || [ "$ACTION" == "--init" ]; then
    confirm_destructive_action "${DRIVES[@]}"
    #echo ""
fi


# Iterate through the provided arguments and execute action
for drive in "${DRIVES[@]}"; do
    echo "Processing drives: ${DRIVES[*]}" >&2
    execute_action "$ACTION" $drive
done


echo -e "\nOperation complete for all specified drives.\n"

