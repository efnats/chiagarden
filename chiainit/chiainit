#!/bin/bash

#requirements
#xfsprogs, smartmontools, ntfs-3g

XFSOPTIONS="-f -b size=1024"
EXT4OPTIONS="-F -m 0 -T largefile4"
NTFSOPTIONS="-f"
SERIALPREFIX="CHIA"

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"

VERSION="V2.2"
ACTION=""
FSTYPE=""

# Default log file location
logfile="./chiainit.log"

# Function to prepend timestamp to each line of output
prepend_timestamp() {
    while IFS= read -r line; do
        echo "$(date '+%Y-%m-%d %H:%M:%S') $line"
    done
}

# Redirect both stdout and stderr, adding timestamps for the logfile
exec > >(tee >(prepend_timestamp >> "$logfile")) 2> >(tee >(prepend_timestamp >> "$logfile") >&2)


# Function to retrieve the serial number of a drive
get_serial_number() {
    drive=$1
    serial_number=$(sudo smartctl -i /dev/$drive | grep -i "Serial Number" | awk  '{ print $3 }')
    if [ -z "$serial_number" ]; then
        echo "UNKNOWN"
    else
        echo "$serial_number"
    fi
}


# Function to retrieve the UUID of a partition
get_uuid() {
    partition=$1
    uuid=$(sudo blkid -o value -s UUID /dev/$partition)
    if [ -z "$uuid" ]; then
        echo "could not get UUID"
    else
        echo "$uuid"
    fi
}


# Function to get the filesystem type of a drive
get_fs_type() {
    partition=$1
    fs_type=$(sudo blkid -o value -s TYPE /dev/$partition)
    echo "$fs_type"
}

# Function to get the size of a drive
get_drive_size() {
    drive=$1
    size=$(lsblk -dn -o SIZE /dev/$drive | tr -d '[:space:]')
    echo "$size"
}


# Confirm destructive actions
confirm_destructive_action() {
    drives=$@
    echo -e "${RED}WARNING:${RESET} You have selected a destructive action (wipe, format, or init)."
    echo -e "${BOLD}THIS WILL DESTROY ALL YOUR DATA ON THE SPECIFIED DRIVE(S).${RESET}"
    for drive in "${drives[@]}"; do
        echo -e "${BOLD}${CYAN}$drive${RESET}"
    done
    echo ""
    echo "To proceed, type 'YES I SACRIFICE THIS DATA' and press Enter."
    read confirmation
    if [ "$confirmation" != "YES I SACRIFICE THIS DATA" ]; then
        echo "Operation canceled."
        exit 0
    fi
}


summarize_actions() {
    ntfs_warning=false
    echo
    echo -e ${BOLD}"Operation Summary"${RESET}
    echo -e "Drives     : ${BOLD}${DRIVES[@]}${RESET}"
    echo -e "Excluded   : ${BOLD}${EXCLUDED_LIST[@]}${RESET}"
    echo -e "Filesystem : ${BOLD}$FSTYPE${RESET}"
    echo -e "Actions    : ${BOLD}${ACTION#--}${RESET}"
    echo

    # Check if any of the drives have the ntfs filesystem and display a warning
    for drive in "${DRIVES[@]}"; do
        if [ "$FSTYPE" == "ntfs" ]; then
            ntfs_warning=true
            break
        fi
    done

    if [ "$ntfs_warning" = true ]; then
        echo -e "${RED}WARNING!!${RESET}${BOLD} There is a potential risk for data corruption when using NTFS-3G for Windows. DONT USE IT FOR YOUR FARM!!${RESET}"
        echo
    fi

    echo "Do you want to continue? (Y/n)"
    read -r user_choice
    if [[ ! "$user_choice" =~ ^[Yy]$ ]] && [[ ! -z "$user_choice" ]]; then
        echo "Operation canceled."
        exit 0
    fi
}


# Function to label a drive
label() {
    drive=$1
    partition="${drive}1"

    # Perform labeling and direct output to the logfile
    {
        echo -e "\n${BOLD}Labeling /dev/$partition${RESET}"
        serial_number=$(get_serial_number "$drive")
        uuid=$(get_uuid "$partition")
        
        if [ "$serial_number" == "UNKNOWN" ]; then
            serial_number=$uuid
        fi
        label="${SERIALPREFIX}-${serial_number}"
        FSTYPE=$(get_fs_type "$partition")

        case "$FSTYPE" in
            xfs)
                label=$(echo "$label" | cut -c 1-12)
                sudo xfs_admin -L "$label" /dev/$partition
                ;;
            ext4)
                label=$(echo "$label" | cut -c 1-16)
                sudo e2label /dev/$partition "$label"
                ;;
            ntfs)
                label=$(echo "$label" | cut -c 1-32)
                sudo ntfslabel /dev/$partition "$label"
                ;;
        esac
    } &>> "$logfile"

    local exit_status=$?
    return $exit_status
}


# Function to get the label of a drive
get_label() {
    partition=$1
    readlabel=""
    fs_type=$(get_fs_type "$partition")

    case "$fs_type" in
        xfs)
            readlabel=$(sudo xfs_admin -l /dev/$partition 2>/dev/null | awk '{print $3}')
            ;;
        ntfs)
            readlabel=$(sudo ntfslabel /dev/$partition 2>/dev/null)
            ;;
        ext4)
            readlabel=$(sudo e2label /dev/$partition 2>/dev/null)
            ;;
    esac
    echo "$readlabel"
}


# Function to wipe a drive
wipe() {
    drive=$1
    sudo wipefs -a /dev/$drive
    local exit_status=$?
    return $exit_status
}


# Function to format a drive
format() {
    drive=$1
    if [ -z "$FSTYPE" ]; then
        return
    fi

    partition="${drive}1"

    # Partition, sync, and format the drive
        sudo parted /dev/$drive --script mklabel gpt mkpart primary $FSTYPE 0% 100%
        sudo sync
        if [ "$FSTYPE" == "xfs" ]; then
            sudo mkfs.xfs ${XFSOPTIONS} /dev/$partition
        elif [ "$FSTYPE" == "ext4" ]; then
            sudo mkfs.ext4 ${EXT4OPTIONS} /dev/$partition
        elif [ "$FSTYPE" == "ntfs" ]; then
            sudo mkfs.ntfs ${NTFSOPTIONS} /dev/$partition
        fi

    local exit_status=$?
    return $exit_status
}


# Function to initialize a drive (wipe, format, and label)
init() {
    drive=$1
    execute_action "--wipe" $drive
    execute_action "--format" $drive
    execute_action "--label" $drive
}


# List all spinning drives in the system using lsblk and exclude ROM drives
get_drives() {
    lsblk -d -o name,rota,type | awk '$2 == "1" && $3 != "rom" {print $1}'
}


increment_drive() {
    local drive=$1

    # Base case: If drive is empty, return "a"
    if [ -z "$drive" ]; then
        echo "a"
        return
    fi

    # Get the last character of the drive and the rest of the drive
    local lastchar="${drive: -1}"
    local remainder="${drive%?}"

    # If the last character is not 'z', increment it
    if [ "$lastchar" != "z" ]; then
        local nextchar=$(printf "\\$(printf '%03o' "$(( $(printf '%d' "'$lastchar'") + 1 ))" )")
        echo "${remainder}${nextchar}"
    else
        # If the last character is 'z', set it to 'a' and increment the next character recursively
        echo "$(increment_drive "$remainder")a"
    fi
}


expand_drive_range() {
    local range="$1"
    local prefix="sd"
    
    # Split the range into start and end using dash as delimiter
    local start="${range%-*}"
    local end="${range#*-}"

    # Remove prefix
    start="${start#$prefix}"
    end="${end#$prefix}"

    local current_drive="$start"

    while [ "$current_drive" != "$end" ]; do
        echo "${prefix}${current_drive}"
        current_drive=$(increment_drive "$current_drive")
    done
    echo "${prefix}${current_drive}"
}



# Function to check if a drive has a mounted root partition
is_system_drive() {
    drive=$1
    root_partition=$(df --output=source / | tail -1)
    echo $root_partition | grep -q "^/dev/${drive}[0-9]*"
    return $?
}


# Function to check if each specified drive exists
check_drives_exist() {
    for drive in "${DRIVES[@]}"; do
        if ! [ -b "/dev/${drive}" ]; then
            echo -e "${RED}Error:${RESET} Drive /dev/$drive does not exist."
            exit 1
        fi
    done
}


# Function to check if any of the specified drives are mounted
is_drive_mounted() {
    drive=$1
    grep -qs "/dev/${drive}[0-9]*" /proc/mounts
    return $?
}


# Check if fstype is issued for format or label action
check_fstype_issued() {
if { [ "$ACTION" == "--format" ] || [ "$ACTION" == "--init" ]; } && [ -z "$FSTYPE" ]; then
    echo "Error: Missing filesystem type for format or label action."
    display_usage
    exit 1
fi
}


# Function to display the help text
help() {
    display_version
    display_help
}


# Display help text
display_help() {
    echo "Usage: chiainit [OPTIONS] drive1 drive2 ... driveN"
    echo "Mass-prepare hard drives for PoST farming"
    echo ""
    echo "Options:"
    echo "  --help                    : Show this help text"
    echo "  --wipe                    : Wipe the specified drives"
    echo "  --format                  : Format the specified drives (requires --fstype)"
    echo "  --label                   : Label the specified drives (fstype is auto-detected)"
    echo "  --init                    : Wipe, format, and label the specified drives (requires --fstype)"
    echo "  --fstype [xfs|ext4|ntfs]  : Specify the filesystem type"
    echo "  --label-prefix PREFIX     : Specify a custom prefix for the drive labels (default: CHIA)"
    echo "  --all                     : Operate on all drives (excluding system drives)"
    echo "  --exclude [drive1 drive2] : Exclude the specified drives from the operation"
    echo ""
    echo "Examples:"
    echo "  chiainit --label sdb sdc"
    echo "  chiainit --fstype ext4 --init sda-sdz"
    echo "  chiainit --fstype xfs --format sda-sdbz --exclude sdf sdg sdh"
    echo "  chiainit --fstype ext4 --label --label-prefix GH sd sdc"
    echo "  chiainit --fstype ext4 --init --all --exclude sda sdb sdc"
}


# Display short help text
display_usage() {
    echo "Usage: chiainit [OPTIONS] [drive-range1] [drive-range2] ... driveN"
    echo "Example: chiainit --fstype ext4 --init sda-sdz"
}


display_version() {
    echo -e "${BOLD}${CYAN}ChiaInit ${VERSION}${RESET}"
}



# Spinner code
spinner=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
export spin=true

start_spinner() {
    local message=$1
    spin=true
    tput civis # Hide cursor

    while $spin; do
        for i in "${spinner[@]}"; do
            printf "\r$i $message"
            sleep 0.1
        done
    done &
    spinner_pid=$!
}

stop_spinner() {
    # Kill the spinner process
    if [ ! -z "$spinner_pid" ]; then
        kill "$spinner_pid" 2>/dev/null
    fi
    tput cnorm # Show cursor
    printf "\r%s\r" "$(printf ' %.0s' {1..50})" # Clear line
}



# Execute action
execute_action() {
    action=$1
    drive=$2
    local output
    local exit_status
    local drive_size=$(get_drive_size $drive)

    case "$action" in
        --init)
            echo -e "\n${BOLD}${CYAN}[+] Drive /dev/$drive [$drive_size]${RESET}"
            init $drive
            ;;
        --wipe)
            start_spinner "/dev/$drive wiping"
            output=$(wipe $drive 2>&1)
            exit_status=$?
            stop_spinner
            if [ $exit_status -eq 0 ]; then
                echo -e "\e[32m✔\e[0m ${CYAN}/dev/$drive${RESET} wiping...... ${GREEN}ok${RESET}"
            else
                echo -e "\e[31m✖\e[0m ${CYAN}/dev/$drive${RESET} wiping...... ${RED}failed${RESET}"
                echo "$output"
            fi
            echo -e "\n$output" >> "$logfile"  # Log output irrespective of success or failure
            ;;
        --format)
            start_spinner "/dev/$drive formatting"
            output=$(format $drive 2>&1)
            exit_status=$?
            stop_spinner
            if [ $exit_status -eq 0 ]; then
                actual_fstype=$(get_fs_type "${drive}1")
                echo -e "\e[32m✔\e[0m ${CYAN}/dev/$drive${RESET} formatting.. ${GREEN}$actual_fstype${RESET}"
            else
                echo -e "\e[31m✖\e[0m ${CYAN}/dev/$drive${RESET} formatting.. ${RED}failed${RESET}"
                echo "$output"
            fi
            echo "$output" >> "$logfile"  # Log output irrespective of success or failure
            ;;
        --label)
            start_spinner "/dev/$drive labelling"
            partition="${drive}1"
            output=$(label $drive "$partition" 2>&1)
            exit_status=$?
            stop_spinner
            echo "$output" >> "$logfile"  # Log output irrespective of success or failure
            if [ $exit_status -eq 0 ]; then
                actual_label=$(get_label "$partition")
                echo -e "\e[32m✔\e[0m ${CYAN}/dev/$drive${RESET} labeling.... ${GREEN}${actual_label}${RESET}"
            else
                echo -e "\e[31m✖\e[0m ${CYAN}/dev/$drive${RESET} labeling.... ${RED}failed${RESET}"
                echo "$output"
            fi
            echo "$output" >> "$logfile"  # Log output irrespective of success or failure
            ;;
            
    esac
}


declare -a drives=()

# Process the command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --wipe|--format|--label|--init)
            ACTION="$1"
            shift
            ;;
        --fstype)
            [[ "$2" =~ ^(xfs|ext4|ntfs)$ ]] && FSTYPE="$2" || { echo "Error: Unsupported filesystem type."; display_usage; exit 1; }
            shift 2
            ;;
        --label-prefix)
            SERIALPREFIX="$2"
            shift 2
            ;;
        --all)
            mapfile -t DRIVES < <(get_drives)
            shift
            ;;
        --exclude)
            while [[ "$#" -gt 1 && ! "$2" =~ ^-- ]]; do
                # echo "Processing exclusion: $2"  # Debug print
                # Check if it's a range
                if [[ $2 == *-* ]]; then
                    for drive in $(expand_drive_range "${2%-*}" "${2##*-}"); do
                        EXCLUDED_DRIVES+=("$drive")
                    done
                else
                    EXCLUDED_DRIVES+=("$2")
                fi
                shift  # Shift once for the processed argument
            done
            shift  # Shift once for the --exclude option itself
            ;;
        --help)
            help
            exit 0
            ;;
        *)
            [ -z "$ACTION" ] && { display_usage; exit 1; }
            # Assume it's either a range or a drive
            # echo "Processing argument: $1"  # Just for debugging purposes
            if [[ $1 == *-* ]]; then
                # It's a range
                for drive in $(expand_drive_range "$1"); do
                    DRIVES+=("$drive")
                done
            else
                # It's a single drive
                DRIVES+=("$1")
            fi
            shift
            ;;
        esac
done


# Initialize an array to store excluded drives
EXCLUDED_LIST=()
echo
# Filter out the system drive, mounted drives, and user-excluded drives
for i in "${!DRIVES[@]}"; do
    is_excluded=false
    if is_system_drive "${DRIVES[$i]}"; then
        echo -e "${YELLOW}INFO:${RESET} Drive ${BOLD}${DRIVES[$i]}${RESET} is a system drive. Excluding from operation."
        is_excluded=true
    #elif is_drive_mounted "${DRIVES[$i]}"; then
    #    echo -e "${YELLOW}INFO:${RESET} Drive ${BOLD}${DRIVES[$i]}${RESET} is mounted. Excluding from operation."
    #    is_excluded=true
    elif [[ " ${EXCLUDED_DRIVES[*]} " == *"${DRIVES[$i]}"* ]]; then
        echo -e "${YELLOW}INFO:${RESET} Drive ${BOLD}${DRIVES[$i]}${RESET} is manually excluded. Excluding from operation."
        is_excluded=true
    fi

    if $is_excluded; then
        EXCLUDED_LIST+=("${DRIVES[$i]}")
    fi
done

# Temporary array for non-excluded drives
NON_EXCLUDED_DRIVES=()

# Filter out the system drive, mounted drives, and user-excluded drives
for drive in "${DRIVES[@]}"; do
    #if is_system_drive "$drive" || is_drive_mounted "$drive" || [[ " ${EXCLUDED_DRIVES[*]} " == *"$drive"* ]]; then
    if is_system_drive "$drive" || [[ " ${EXCLUDED_DRIVES[*]} " == *"$drive"* ]]; then
        # Drive is excluded, do nothing
        :
    else
        # Add non-excluded drives to the temporary array
        NON_EXCLUDED_DRIVES+=("$drive")
    fi
done

# Update DRIVES to only include non-excluded drives
DRIVES=("${NON_EXCLUDED_DRIVES[@]}")


check_fstype_issued
check_drives_exist
summarize_actions


# Check for and confirm destructive actions
 if [ "$ACTION" == "--wipe" ] || [ "$ACTION" == "--format" ] || [ "$ACTION" == "--init" ]; then
    confirm_destructive_action "${DRIVES[@]}"
    #echo ""
 fi


for drive in "${DRIVES[@]}"; do
    # Skip if the drive is in the excluded list
    if [[ " ${EXCLUDED_LIST[*]} " == *" $drive "* ]]; then
        echo "Skipping operations on excluded drive: $drive"
        continue
    fi
    execute_action "$ACTION" $drive
done

echo -e "\nOperation complete for all specified drives.\n"

