#!/bin/bash

################################################
#   VARIABLES - adjust these to your liking    #
################################################
#
# the variable section has moved out to the config file entirely
# please see the example config file for details
#
###### No variables to change below ###############

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"

# Initialize variable for configuration file path
config_file_path="./plot_over.config"


# Print usage
print_usage() {
    echo "Usage: $0 [--dry-run] [--interval interval] [--mount-dir mount_dir] [--label label] [--subdir subdir] [--config config_file_path] [--help]"
    echo "Note: --mount-dir and --label cannot be used at the same time."
}


# Print help text
print_help() {
    echo "Usage: $0 [--dry-run] [--interval interval] [--mount-dir mount_dir] [--label label] [--subdir subdir] [--config config_file_path] [--help]"
    echo ""
    echo "Arguments:"
    #echo "  --dry-run          Run the script without actually deleting any plot files."
    echo "  --interval         Set the interval in seconds between consecutive scans for plot files to remove."
    echo "  --mount-dir        Set the base directory where your plot drives are mounted (e.g., /mnt/plots/)."
    echo "  --label            Use this flag if you want the script to search for drives with a specific label pattern."
    echo "  --subdir           Set the subdirectory within the drives where plot files are located."
    echo "  --config           Specify a custom configuration file path (including filename)."
    echo "  --help             Display this help message and exit."
    echo ""
    echo "Note: --mount-dir and --label cannot be used at the same time."
}


while [[ "$#" -gt 0 ]]; do
    case $1 in
        # --dry-run)
        #     dry_run=true
        #     shift
        #     ;;
        --config)
            config_file_path="$2"
            shift 2
            ;;
        --help)
            print_help
            exit 0
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit 1
            ;;
    esac
done


# Function to load configuration from file
load_config() {
    while IFS='=' read -r key value; do
        if [[ "$key" != "" && "$key" != \#* ]]; then
            value=$(echo "$value" | cut -d'#' -f1 | xargs)
            eval "$key='$value'"
        fi
    done < "$1"
}

# Check if a custom config file is specified and load it
if [[ -n "$config_file_path" ]]; then
    if [[ -f "$config_file_path" ]]; then
        echo "Loading configuration from file: $config_file_path"
        load_config "$config_file_path"
        sleep 1
    else
        echo "Error: Configuration file specified at '$config_file_path' not found."
        exit 1
    fi
else
    echo "Error: No configuration file specified."
    exit 1
fi

plot_patterns=('plot-k32-202*.plot' \
'plot-k32-c1-*.plot' \
'plot-k32-c2-*.plot' \
'plot-k32-c3-*.plot' \
'plot-k32-c4-*.plot' \
'plot-k32-c5-*.plot' \
'plot-k32-c6-*.plot' \
'plot-k32-c7-*.plot' \
'plot-k32-c8-*.plot' \
'plot-k32-c9-*.plot' \
'plot-k32-c10-*.plot' \
'plot-k32-c11-*.plot' \
'plot-k32-c12-*.plot' \
'plot-k32-c13-*.plot' \
'plot-k32-c14-*.plot' \
'plot-k32-c15-*.plot' \
'plot-k32-c16-*.plot' \
'plot-k32-c17-*.plot' \
'plot-k32-c18-*.plot' \
'plot-k32-c19-*.plot' \
'plot-k32-c20-*.plot' \
'plot-k32-c21-*.plot' \
'plot-k32-c22-*.plot' \
'plot-k32-c23-*.plot' \
'plot-k32-c24-*.plot' \
'plot-k32-c25-*.plot' \
'plot-k32-c26-*.plot' \
'plot-k32-c27-*.plot' \
'plot-k32-c28-*.plot' \
'plot-k32-c29-*.plot' \
'plot-k32-c30-*.plot' \
'plot-k32-c31-*.plot' \
'plot-k32-c32-*.plot' \
'plot-k32-c33-*.plot')
min_free_space_bytes=$((min_free_space * 1073741824)) # minimum free space in bytes
IFS=',' read -ra replot_levels_arr <<< "$replot_levels"
disks_replotted=0



# is_running_as_systemd_service() {
#     if [ -n "$INVOCATION_ID" ]; then
#         return 0 # True, running as systemd service
#     else
#         return 1 # False, not running as systemd service
#     fi
# }

is_running_as_systemd_service() {
    if [ $(ps -o comm= -p $PPID) = 'systemd' ]; then
        return 0 # True, running as systemd service
    else
        return 1 # False, not running as systemd service
    fi
}

# is_running_as_systemd_service() {
    # if [ "$RUNNING_UNDER_SYSTEMD" = "true" ]; then
        # return 0 # True, running as systemd service
    # else
        # return 1 # False, not running as systemd service
    # fi
# }

is_running_as_systemd_service
running_as_systemd_service=$?

# Function to sleep for the specified interval before repeating the loop
sleep_interval_simple() {
    echo
    echo -e "waiting ${CYAN}$interval${RESET} seconds"
    sleep "$interval"
}

sleep_interval() {
    local countdown="$interval"
    echo -e
    while [ $countdown -gt 0 ]; do
        echo -ne "waiting ${CYAN}$countdown${RESET} seconds...\r"
        sleep 1
        ((countdown--))
    done
    echo -ne '\n'
}

# Check if duf is installed
check_duf_installed() {
  if ! command -v duf >/dev/null 2>&1; then
    echo ""
    echo -e "${YELLOW}${BOLD}Duf-utility not found${RESET}"
    echo -e "${RED}For a shiny table overview of your disks here, please install ${BOLD}duf${RESET} ${RED}from${RESET} ${CYAN}${BOLD}https://github.com/muesli/duf${RESET}"
        return 1
  fi
  return 0
}

# Validate the command-line arguments
validate_arguments() {
  if [ -z "$mount_dir" ] && [ -z "$label" ]; then
    print_usage
    exit 1
  fi

  if [ -n "$mount_dir" ] && [ -n "$label" ]; then
    echo "Error: Both --mount-dir and --label cannot be used at the same time."
    print_usage
    exit 1
  fi
}


# Function to get formatted date
get_formatted_date() {
    echo "$(date '+%Y-%m-%d %H:%M:%S')"
}


# Find disks based on input parameters
find_disks() {
  if [ -n "$label" ]; then
    # If --label is provided, find the mount points matching the label
    IFS=$'\n' read -rd '' -a disks < <(lsblk -o NAME,LABEL,MOUNTPOINT | awk -v label="$label" '$2 ~ "^"label {print $3}')
  else
    # If --mount-dir is provided, find all actual mounted disks in the specified directory
    if [ -d "$mount_dir" ]; then
      # List all mount points and filter those under mount_dir
      IFS=$'\n' read -rd '' -a disks < <(mount | awk -v mount_dir="$mount_dir" '$3 ~ "^"mount_dir {print $3}')
    else
      echo "Mount directory $mount_dir not found."
      disks=()  # Clear the disks array to prevent unintended operations
      return 1  # Optional: Return an error code to indicate failure
    fi
  fi

  # Append subdir to each disk if provided
  if [ -n "$subdir" ]; then
    for i in "${!disks[@]}"; do
      disks[i]="${disks[i]}/$subdir"
    done
  fi
}


# Identify replotted disks
get_replotted_disks() {
    replotted_disks_array=()  # Array to store the names of replotted disks
    disks_replotted=0  # Counter for the number of replotted disks

    for disk in "${disks[@]}"; do
        contains_unwanted_plots=false
        for level in "${replot_levels_arr[@]}"; do
            # Check if disk contains plots of this compression level
            plot_pattern="plot-k32-c${level}-*.plot"
            if find "$disk" -maxdepth "$search_depth" -type f -name "$plot_pattern" -exec false {} +; then
                contains_unwanted_plots=true
                break
            fi
        done

        if [ "$contains_unwanted_plots" = false ]; then
            replotted_disks_array+=("$disk")  # Add disk to replotted_disks_array
            ((disks_replotted++))  # Increment the counter
        fi
    done
}


# Detailed info about paths to include for searching plot files
search_path_output() {
    echo ""
    #echo -e "${YELLOW}Debugging output:${RESET}"
     echo "Processing the following directories:"
      for disk in "${disks[@]}"; do
        echo "  - $disk"
      done
    #echo -e "${YELLOW}End of debugging output${RESET}"
    echo ""
}


get_free_disks() {
  free_disks=()
  eligible_disks=()

  for disk in "${disks[@]}"; do
    free_space=$(df -B 1 "$disk" | awk 'NR==2 {print $4}')

    # Check if the disk is not in the replotted_disks_array
    if [[ ! " ${replotted_disks_array[@]} " =~ " ${disk} " ]]; then
        if [ "$free_space" -ge "$min_free_space_bytes" ]; then
            free_disks+=("$disk")
        else
            eligible_disks+=("$disk")   # Only add to eligible if not fully replotted
        fi
    fi
  done

  if [ "${#free_disks[@]}" -ge "$amount_free_disks" ]; then
    enough_free_disks=true
  else
    enough_free_disks=false
  fi
}


find_oldest_plot() {
  local level=$1
  oldest_plot=""
  oldest_timestamp=$(date +%s)
  file_count=0

  # Iterate over eligible_disks and find the oldest plot file
  for disk in "${eligible_disks[@]}"; do
    if [[ "$level" -ge 1 && "$level" -le 9 ]]; then
      single_digit=$(($level))
      double_digit=$(printf "%02d" $level)
      find_output=$(find "$disk" -maxdepth "$search_depth" -type f \( -name "plot-k32-c${single_digit}-*.plot" -o -name "plot-k32-c${double_digit}-*.plot" \) -printf '%T@ %p\n' 2>/dev/null)
    else
      find_output=$(find "$disk" -maxdepth "$search_depth" -type f -name "${plot_patterns[$level]}" -printf '%T@ %p\n' 2>/dev/null)
    fi

    if [ -n "$find_output" ]; then
      while IFS= read -r line; do
        timestamp=$(echo "$line" | awk '{print $1}')
        file=$(echo "$line" | awk '{print $2}')

        if [ "$(echo "$timestamp < $oldest_timestamp" | bc)" -eq 1 ]; then
          oldest_timestamp=$timestamp
          oldest_plot=$file
        fi
        file_count=$((file_count + 1))
      done <<< "$find_output"
    fi
  done
}



# Remove identified plot and log action into logfile
remove_oldest_plot() {
    if [ -n "$oldest_plot" ]; then
        # Use the pre-determined service running status
        if [ "$running_as_systemd_service" -eq 0 ]; then
            date_prefix=""
        else
            date_prefix="${CYAN}$(get_formatted_date)${RESET} "
        fi

        # Output message
        if [ "$dry_run" = true ]; then
            echo -e "${date_prefix}DRY-RUN would remove $oldest_plot"
        else
            echo -e "${date_prefix}removing $oldest_plot"
            rm_output=$(rm -v "$oldest_plot" 2>&1)
            echo -e "${date_prefix}$rm_output"
        fi

        # Log to file only if not running as systemd service
        if [ "$running_as_systemd_service" -ne 0 ] && [ -n "$logfile" ]; then
            echo "$(date) - ${rm_output}" >> "$logfile"
        fi

        echo
        plot_removed=true
    fi
}




# Find and remove the oldest plot file based on the provided compression level or skip in certain conditions
process_plot_files() {
  # Use the pre-determined service running status
  if [ "$running_as_systemd_service" -eq 0 ]; then
      date_prefix=""
  else
      date_prefix="${CYAN}$(get_formatted_date)${RESET} "
  fi
  get_free_disks

  if [ "$enough_free_disks" = false ]; then
    no_matching_plots_found=false

    while [ "$enough_free_disks" = false ] && [ "$no_matching_plots_found" = false ]; do
      plot_removed=false

      echo -e "${date_prefix}Finding next plot for removal.."

      for level in "${replot_levels_arr[@]}"; do
        if [ "$plot_removed" = false ]; then
          find_oldest_plot "$level"
          remove_oldest_plot
          if [ "$plot_removed" = true ]; then
            sleep 2
            break
          fi
        fi
      done

      # Update the number of free disks after removing the plot
      get_free_disks

      # If no files with matching plot patterns were found
      if [ $file_count -eq 0 ]; then
        echo -e "${date_prefix}No plot files with matching patterns were found."
        no_matching_plots_found=true
      fi
    done
  else
    echo -e "${date_prefix}There are enough free disks. No need to remove any plot files."
  fi
}


# Display information about the script's settings and monitored disks
display_config_info() {
  disk_count="${#disks[@]}"

  if [ -n "$mount_dir" ]; then
  echo -e "Watching a total of ${CYAN}$disk_count${RESET} drives in ${CYAN}$mount_dir*${RESET}"
    elif [ -n "$label" ]; then
  echo -e "Watching a total of ${CYAN}$disk_count${RESET} drives labelled with the pattern ${CYAN}$label${RESET}"
  fi

  echo -e "${CYAN}$amount_free_disks${RESET} drives each required to have ${CYAN}$min_free_space${RESET} GB free space"
  echo -e "${CYAN}$disks_replotted${RESET} drives are fully replotted"
  echo -e "Plot levels marked for removal: ${CYAN}$replot_levels${RESET}"
  echo -e
  if [ "$dry_run" = true ]; then
    #echo ""
    echo -e "${CYAN}DRY-RUN MODE - NOTHING WILL BE DELETED${RESET}"
    echo ""
  fi
  if [ "$display_search_paths" = true ]; then
  search_path_output
  fi
}

# Display information about free disks
display_free_disks_info() {
  get_free_disks
  if [ ${#free_disks[@]} -gt 0 ]; then
    echo -e "${CYAN}${#free_disks[@]}${RESET} drives meet the requirements"
    
    # Execute duf command only if not running as systemd service and duf is installed
    if [ "$running_as_systemd_service" -ne 0 ] && check_duf_installed; then
      duf ${free_disks[@]}
      echo ""
    fi
  else
    echo "No drives meet the requirements. Marking plots for removal.."
  fi
}



validate_arguments
find_disks

# Count total disks
disk_count="${#disks[@]}"

# Identify replotted disks and adjust amount_free_disks
get_replotted_disks
max_free_disks=$((disk_count - disks_replotted))

# Adjust amount_free_disks if necessary
if [ "$amount_free_disks" -gt "$max_free_disks" ]; then
    amount_free_disks=$max_free_disks
fi

# Main loop
while true; do
  if [ "$running_as_systemd_service" -ne 0 ]; then
    clear
    echo -e ${BOLD}Chiagarden plot_over${RESET}
    echo
    display_config_info
    display_free_disks_info
    process_plot_files
    sleep_interval
  else
    echo
    display_config_info
    display_free_disks_info
    process_plot_files
    sleep_interval_simple
  fi
done

