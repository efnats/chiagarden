#!/bin/bash

##################################
# Variables
##################################

interval=180 # Default rescan interval (in seconds)
mount_dir=""
label="CHIA"
maxdepth=20

##################################
### DO NOT CHANGE AFTER THIS LINE
##################################

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"


# Function to print usage text
print_usage() {
    echo "Usage: $0 (--mount-dir <mountpoint_of_chia_disks> | --label <label_of_chia_disks>) [--interval interval_seconds]"
    echo
    echo "Options:"
    echo "  --mount-dir <mountpoint_of_chia_disks>  Count Chia plots in the specified directory."
    echo "  --label <label_of_chia_disks>           Count Chia plots in the disks starting with the specified label."
    echo "  --interval <interval_seconds>           Set the rescan interval in seconds (default: 120 seconds)."
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --interval)
            interval="$2"
            shift 2
            ;;
        --mount-dir)
            mount_dir="$2"
            shift 2
            ;;
        --label)
            label="$2"
            shift 2
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit 1
            ;;
    esac
done

# Check if the user has provided the required arguments
if [ -z "$mount_dir" ] && [ -z "$label" ]; then
    print_usage
    exit 1
fi

# Check if both --mount-dir and --label are provided
if [ -n "$mount_dir" ] && [ -n "$label" ]; then
    echo "Error: Both --mount-dir and --label cannot be used at the same time."
    print_usage
    exit 1
fi

find_chia_disks() {
    if [ -n "$mount_dir" ]; then
        echo "$mount_dir*"
    elif [ -n "$label" ]; then
        # List all mounted disks with their labels, filter those with labels starting with the given pattern
        lsblk -o NAME,LABEL,MOUNTPOINT | awk -v label="$label" '$2 ~ "^"label {print $3}'
    fi
}

# Spinner code
spinner=( '⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏' )

start_spinner() {
    while true; do
        for i in "${spinner[@]}"; do
            echo -ne "\r$i"
            sleep 0.1
        done
    done &
    spinner_pid=$!
}

stop_spinner() {
    kill "$spinner_pid" > /dev/null 2>&1
    wait "$spinner_pid" > /dev/null 2>&1
    echo -ne "\r"
}

count_written_data_in_period() {
    local period_in_seconds=$1
    local current_time=$(date +%s)
    local period_start=$((current_time - period_in_seconds))
    local total_size=0

    for disk in $(find_chia_disks)
    do
        if [ -d "$disk" ]; then
            size=$(find "$disk" -maxdepth "$maxdepth" -name '*.plot' -type f -printf '%T@ %s\n' | awk -v period_start="$period_start" '$1 > period_start {s+=$2} END {print s/1024/1024/1024/1024}')
            total_size=$(awk -v total_size="$total_size" -v new_size="$size" 'BEGIN {print total_size+new_size}')
        fi
    done

    echo "$(printf '%.2f' "$total_size")"
}

count_plot_files_in_period() {
    local period_in_seconds=$1
    local current_time=$(date +%s)
    local period_start=$((current_time - period_in_seconds))
    local total_count=0

    for disk in $(find_chia_disks)
    do
        if [ -d "$disk" ]; then
            count=$(find "$disk" -maxdepth "$maxdepth" -name '*.plot' -type f -printf '%T@ %s\n' | awk -v period_start="$period_start" '$1 > period_start {count++} END {print count}')
            total_count=$((total_count + count))
        fi
    done

    echo "$total_count"
}

get_disks() {
    # Get the list of chia disks
    chia_disks=$(find_chia_disks)
    chia_disks_count=$(echo "$chia_disks" | grep -v '^$' | wc -l) # Count non-empty lines

    echo # Add an extra line for better visual separation

    if [ -n "$mount_dir" ]; then
        echo -e "${CYAN}Counting plots in directories:${RESET} $mount_dir*"
    elif [ -n "$label" ]; then
        echo -e "${CYAN}Disks with label pattern '${label}':${RESET} $chia_disks_count"
    else
        echo -e "${RED}No mount directory or label pattern specified.${RESET}"
    fi

    echo # Add an extra line for better visual separation
}

# Call the function to see the output
get_disks


# Function to initialize the counters
    initialize_counters() {
        # Initialize an array with the patterns to search for
        declare -g -a patterns=(
            'plot-k32-20*.plot'
            'plot-k32-c1-*.plot'
            'plot-k32-c2-*.plot'
            'plot-k32-c3-*.plot'
            'plot-k32-c4-*.plot'
            'plot-k32-c5-*.plot'
            'plot-k32-c6-*.plot'
            'plot-k32-c7-*.plot'
            'plot-k32-c8-*.plot'
            'plot-k32-c9-*.plot'
            'plot-k32-c10-*.plot'
            'plot-k32-c11-*.plot'
            'plot-k32-c12-*.plot'
            'plot-k32-c13-*.plot'
            'plot-k32-c14-*.plot'
            'plot-k32-c15-*.plot'
            'plot-k32-c16-*.plot'
            'plot-k32-c17-*.plot'
            'plot-k32-c18-*.plot'
            'plot-k32-c19-*.plot'
            'plot-k32-c20-*.plot'
        )

        # Initialize an array to store the total counts and sizes
        declare -g -a counts=()
        declare -g -a sizes=()
    }

# Function to count plots and sizes
count_plots() {
    # Loop through all directories found by find_chia_disks
    for disk in $(find_chia_disks)
    do
        # Check if the disk is accessible
        if [ -d "$disk" ]
        then
            # Loop through all patterns and count the number of files matching each pattern
            for i in "${!patterns[@]}"
            do
                count=$(find "$disk" -maxdepth "$maxdepth" -name "${patterns[$i]}" | wc -l)

                # Add the count to the corresponding element in the counts array
                counts[$i]=$((counts[$i] + count))

                # Calculate the size of the files matching the pattern in TiB
                size=$(find "$disk" -maxdepth "$maxdepth" -name "${patterns[$i]}" -printf '%s\n' | awk '{s+=$1} END {print s/1024/1024/1024/1024}')
                
                # Add the size to the corresponding element in the sizes array
                sizes[$i]=$(awk -v size="${sizes[$i]:-0}" -v new_size="$size" 'BEGIN {print size+new_size}')
            done
        fi
    done
}

plots_distribution() {
    echo -e "${GREEN}Plots distribution${RESET}"
    # Print the table header
    printf "%-5s %12s %12s %12s\n" "Plot" "Count" "TiB" "eTiB"
    printf "============================================\n"
    
    # Print the total counts, sizes, and effective sizes for each C-part pattern
    total_plots=0
    total_size=0
    total_effective_size=0
    for i in {0..20}
    do
        count="${counts[$i]}"
        # Skip the line if the count is zero
        if [ "$count" -eq 0 ]; then
            continue
        fi

        plot="C$i"
        size="${sizes[$i]:-0}"
        effective_size=$(echo "$count * 0.99023438" | bc)
        printf "%-5s %12s %12s %12s\n" "$plot:" "$count" "$(printf '%.2f' "$size")" "$(printf '%.2f' "$effective_size")"
        total_plots=$((total_plots + count))
        total_size=$(awk -v total_size="$total_size" -v new_size="$size" 'BEGIN {print total_size+new_size}')
        total_effective_size=$(awk -v total_effective_size="$total_effective_size" -v new_effective_size="$effective_size" 'BEGIN {print total_effective_size+new_effective_size}')
    done

    # Print the total number of plots, size in TiB, and effective size in eTiB
    printf "============================================\n"
    printf "%-5s %12s %12s %12s\n" "Total" "$total_plots" "$(printf '%.2f' "$total_size")" "$(printf '%.2f' "$total_effective_size")"
}


data_written() {
    
    # Call the count_plot_files_in_period and count_written_data_in_period functions
    # plot_files_last_xx
    plot_files_last_minute=$(count_plot_files_in_period 60)
    plot_files_last_hour=$(count_plot_files_in_period 3600)
    plot_files_last_day=$(count_plot_files_in_period $((24 * 3600)))
    plot_files_last_week=$(count_plot_files_in_period $((7 * 24 * 3600)))
    plot_files_last_month=$(count_plot_files_in_period $((4 * 7 * 24 * 3600)))
    plot_files_last_quarter=$(count_plot_files_in_period $((3 * 30 * 24 * 3600)))
    plot_files_last_year=$(count_plot_files_in_period $((365 * 24 * 3600)))

    # written_data_last_xx
    written_data_last_minute=$(count_written_data_in_period 60)
    written_data_last_hour=$(count_written_data_in_period 3600)
    written_data_last_day=$(count_written_data_in_period $((24 * 3600)))
    written_data_last_week=$(count_written_data_in_period $((7 * 24 * 3600)))
    written_data_last_month=$(count_written_data_in_period $((4 * 7 * 24 * 3600)))
    written_data_last_quarter=$(count_written_data_in_period $((3 * 30 * 24 * 3600)))
    written_data_last_year=$(count_written_data_in_period $((365 * 24 * 3600)))

    # seconds_per_plot_last_xx
    seconds_per_plot_last_minute=$(awk -v plots="$plot_files_last_minute" -v period="60" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')
    seconds_per_plot_last_hour=$(awk -v plots="$plot_files_last_hour" -v period="3600" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')
    seconds_per_plot_last_day=$(awk -v plots="$plot_files_last_day" -v period="$((24 * 3600))" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')
    seconds_per_plot_last_week=$(awk -v plots="$plot_files_last_week" -v period="$((7 * 24 * 3600))" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')
    seconds_per_plot_last_month=$(awk -v plots="$plot_files_last_month" -v period="$((4 * 7 * 24 * 3600))" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')
    seconds_per_plot_last_quarter=$(awk -v plots="$plot_files_last_quarter" -v period="$((3 * 30 * 24 * 3600))" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')
    seconds_per_plot_last_year=$(awk -v plots="$plot_files_last_year" -v period="$((365 * 24 * 3600))" 'BEGIN {if (plots > 0) print int((period/plots) + 0.5)}')

    # Print the table header
    echo
    echo
    echo -e "${GREEN}Data written${RESET}"
    printf "%-5s %11s %12s %12s\n" "Period" "Plots" "TiB" "Sec/Plot"
    printf "============================================\n"

    # Print the number of plot files, the amount of data written, and seconds/plot for each time period
    printf "Minute %11s %12s %12s\n" "$plot_files_last_minute" "$written_data_last_minute" "$seconds_per_plot_last_minute"
    printf "Hour   %11s %12s %12s\n" "$plot_files_last_hour" "$written_data_last_hour" "$seconds_per_plot_last_hour"
    printf "Day    %11s %12s %12s\n" "$plot_files_last_day" "$written_data_last_day" "$seconds_per_plot_last_day"
    printf "Week   %11s %12s %12s\n" "$plot_files_last_week" "$written_data_last_week" "$seconds_per_plot_last_week"
    printf "Month  %11s %12s %12s\n" "$plot_files_last_month" "$written_data_last_month" "$seconds_per_plot_last_month"
    printf "Quarter%11s %12s %12s\n" "$plot_files_last_quarter" "$written_data_last_quarter" "$seconds_per_plot_last_quarter"
    printf "Year   %11s %12s %12s\n" "$plot_files_last_year" "$written_data_last_year" "$seconds_per_plot_last_year"
}


# Function to sleep for the specified interval before repeating the loop
sleep_interval() {
    echo
    echo -e "every ${CYAN}$interval${RESET} seconds"
    sleep "$interval"
}


# Main loop
while true
do
    # Clear the terminal screen
    clear
    echo -e "${BOLD}ChiaGarden plot_counter${RESET}"
    # get the disks
    get_disks
    
    # Start the spinner
    start_spinner

    # Call the function to initialize the counters
    initialize_counters

    count_plots
    stop_spinner
    plots_distribution
    data_written
    sleep_interval

done