#!/bin/bash

# Chiagarden plot_timer
# This script will parse the plot-starter logs and calculate the average time for each phase and total time for the last n minutes.


interval=80 # Default interval is 60 seconds

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"

# Spinner code
spinner=( '⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏' )

start_spinner() {
    while true; do
        for i in "${spinner[@]}"; do
            echo -ne "\r$i"
            sleep 0.1
        done
    done &
    spinner_pid=$!
}

stop_spinner() {
    kill "$spinner_pid" > /dev/null 2>&1
    wait "$spinner_pid" > /dev/null 2>&1
    echo -ne "\r"
}


## Function to parse command line arguments
parse_args() {
    local last=30 # Initialize default value for last

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --last)
                last="$2"
                shift # past argument
                shift # past value
                ;;
            --last=*)
                last="${1#*=}"
                shift # past argument=value
                ;;
            --interval)
                interval="$2"
                shift # past argument
                shift # past value
                ;;
            --interval=*)
                interval="${1#*=}"
                shift # past argument=value
                ;;
            *)
                shift # past unknown option
                ;;
        esac
    done

    echo "$last:$interval"
}


# Function to extract total plot time and phase times
extract_log_data() {
    local last_minutes=$1
    journalctl --since "$last_minutes minutes ago" -u plot-starter | grep -E "Compression Level:|Total plot creation time was|Phase [1-4] took|finished, took [0-9.]+ sec, [0-9.]+ MB/s"
}

# Function to process log data
process_plot_data() {
    local data="$1"
    declare -A total_plot_times phase1_times phase2_times phase3_times phase4_times count_times
    local compression_level plot_time phase_time

    compression_level=""

    while read -r line; do
        if [[ $line =~ Compression\ Level:\ (.+) ]]; then
            compression_level="${BASH_REMATCH[1]}"
        elif [[ $line =~ Total\ plot\ creation\ time\ was\ ([0-9.]+)\ sec ]] && [ ! -z "$compression_level" ]; then
            plot_time="${BASH_REMATCH[1]}"
            total_plot_times[$compression_level]=$(echo "${total_plot_times[$compression_level]:-0} + $plot_time" | bc -l)
            ((count_times[$compression_level]++))
        elif [[ $line =~ Phase\ ([1-4])\ took\ ([0-9.]+)\ sec ]] && [ ! -z "$compression_level" ]; then
            phase_time="${BASH_REMATCH[2]}"
            case "${BASH_REMATCH[1]}" in
                1) phase1_times[$compression_level]=$(echo "${phase1_times[$compression_level]:-0} + $phase_time" | bc -l) ;;
                2) phase2_times[$compression_level]=$(echo "${phase2_times[$compression_level]:-0} + $phase_time" | bc -l) ;;
                3) phase3_times[$compression_level]=$(echo "${phase3_times[$compression_level]:-0} + $phase_time" | bc -l) ;;
                4) phase4_times[$compression_level]=$(echo "${phase4_times[$compression_level]:-0} + $phase_time" | bc -l) ;;
            esac
        fi
    done <<< "$data"

    for key in "${!total_plot_times[@]}"; do
        echo "$key:${total_plot_times[$key]}:${phase1_times[$key]}:${phase2_times[$key]}:${phase3_times[$key]}:${phase4_times[$key]}:${count_times[$key]}"
    done
}

process_transfer_data() {
    local data="$1"
    local total_data=0
    local total_time=0
    local speed
    local time

    while read -r line; do
        if [[ $line =~ finished,\ took\ ([0-9.]+)\ sec,\ ([0-9.]+)\ MB/s ]]; then
            time="${BASH_REMATCH[1]}"
            speed="${BASH_REMATCH[2]}"
            total_data=$(echo "$total_data + $time * $speed" | bc -l)
            total_time=$(echo "$total_time + $time" | bc -l)
        fi
    done <<< "$data"

    local average_speed=$(echo "scale=2; $total_data / $total_time" | bc -l)
    echo "$total_data:$average_speed"
}

display_header() {
    local total_count=$1
    echo -e "${CYAN}Created${RESET} $total_count ${CYAN}plots in the last${RESET} $last ${CYAN}minutes${RESET}"
    echo
    echo -e "${GREEN}Average${RESET}"
}


get_total_count(){
total_count=0
for entry in $processed_plot_data; do
    IFS=':' read -r key total_time phase1_time phase2_time phase3_time phase4_time count <<< "$entry"
    ((total_count+=count))
done
}

# Function to sleep for the specified interval before repeating the loop
sleep_interval() {
    echo
    echo -e "every ${CYAN}$interval${RESET} seconds"
    sleep "$interval"
}

# Function to display the results in specified format
display_plotting_results() {
    local data="$1"
    declare -A total_plot_times phase1_times phase2_times phase3_times phase4_times count_times
    local key total_time phase1_time phase2_time phase3_time phase4_time count

    for entry in $data; do
        IFS=':' read -r key total_time phase1_time phase2_time phase3_time phase4_time count <<< "$entry"
        total_plot_times[$key]=$total_time
        phase1_times[$key]=$phase1_time
        phase2_times[$key]=$phase2_time
        phase3_times[$key]=$phase3_time
        phase4_times[$key]=$phase4_time
        count_times[$key]=$count
    done

    if [ ${#count_times[@]} -eq 0 ]; then
        echo "No plots found."
        return
    fi

    for level in "${!total_plot_times[@]}"; do
        printf "%-14s %7s %9s\n" "$level" "Seconds" "Minutes"
        printf "================================\n"
        calculate_plot_avg "Phase 1" ${phase1_times[$level]} ${count_times[$level]}
        calculate_plot_avg "Phase 2" ${phase2_times[$level]} ${count_times[$level]}
        calculate_plot_avg "Phase 3" ${phase3_times[$level]} ${count_times[$level]}
        calculate_plot_avg "Phase 4" ${phase4_times[$level]} ${count_times[$level]}
        printf "================================\n"
        calculate_plot_avg "Total Avg" ${total_plot_times[$level]} ${count_times[$level]}
        echo
    done
}

display_transfer_results() {
    local result="$1"
    IFS=':' read -r total_mb average_speed <<< "$result"

    # Convert MB to MiB (1 MB = 1,000,000 bytes; 1 MiB = 1,048,576 bytes)
    local total_mib=$(echo "scale=6; $total_mb * 1000000 / 1048576" | bc -l)

    # Determine the appropriate unit (MiB, GiB, TiB)
    local unit="MiB"
    if (( $(echo "$total_mib > 1024" | bc -l) )); then
        total_mib=$(echo "scale=2; $total_mib / 1024" | bc -l)
        unit="GiB"
    fi
    if (( $(echo "$total_mib > 1024" | bc -l) )); then
        total_mib=$(echo "scale=2; $total_mib / 1024" | bc -l)
        unit="TiB"
    fi

    # Display the results
    echo -e "${GREEN}Total${RESET}"
    printf "%-20s ${CYAN}%7.2f${RESET} %s\n" "Data Transferred" "$total_mib" "$unit"
    printf "%-20s${RESET} ${CYAN}%7.2f${RESET} MB/s\n" "Average Speed" "$average_speed"
}


calculate_plot_avg() {
    local phase=$1
    local total_time=$2
    local count=$3
    local average_seconds=$(echo "scale=2; $total_time/$count" | bc -l)
    local average_minutes=$(echo "scale=2; $average_seconds/60" | bc -l)
    printf "%-14s %7.2f %9.2f\n" "$phase" "$average_seconds" "$average_minutes"
}

# Main loop
while true
do
    clear
    echo -e ${BOLD}"Chiagarden plot_timer${RESET}"
    echo
    start_spinner
    
    IFS=':' read last interval <<< $(parse_args "$@")

    # Extract and process plot data
    log_data=$(extract_log_data $last)
    transfer_data=$(extract_log_data $last)  

    # Extract and process transfer data
    processed_plot_data=$(process_plot_data "$log_data")
    processed_transfer_data=$(process_transfer_data "$transfer_data")
    get_total_count
    stop_spinner

    # Display plot and transfer results
    display_header $total_count
    display_plotting_results "$processed_plot_data"
    display_transfer_results "$processed_transfer_data"
    sleep_interval
done