#!/bin/bash

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"

initialize_parameters() {
    # Set the default config variable
    config="plot_starter.config"                        # Default config file
    plotterbin="/usr/local/bin/cuda_plot_k32"           # Path to plotter binary
    chia_plot_copy_bin="/usr/local/bin/chia_plot_copy"  # Path to chia_plot_copy binary

    # These are typical values needed to be set to start plotting
    contract="POOL_CONTRACT_ADDRESS"    # Pool Contract Address (62 chars), empty if not used
    farmerkey="FARMER_KEY"   # Farmer Public Key (48 bytes), empty if not used
    level="18"       # Compression level (1 to 9 and 11 to 20)
    count="-1"     # Number of plots to create (default = 1, unlimited = -1)
    finaldir="@192.168.31.33"    # Final destinations (default = <tmpdir>, remote = @HOST)
    tmpdir="/mnt/plotting"      # Temporary directories for plot storage (default = $PWD)
    tmpdir2=""     # Temporary directory 2 for partial RAM/disk mode (default = @RAM)
    tmpdir3=""     # Temporary directory 3 for disk mode (default = @RAM)

    # These values are less often used
    port=""        # Network port (default = 8444, MMX = 11337)
    device=""      # CUDA device (default = 0)
    ndevices=""    # Number of CUDA devices (default = 1)
    dstport=""     # Destination port for remote copy (default = 1337)
    waitforcopy="" # Wait for copy to start next plot (false)
    poolkey=""     # Pool Public Key (48 bytes), empty if not used
    unique=""      # Make unique plot (false)
    directio=""    # Use direct IO for final copy (false, Linux only)
    streams=""     # Number of parallel streams (default = 3, must be >= 2)
    chunksize=""   # Bucket chunk size in MiB (default = 16, 1 to 256)
    maxtmp=""      # Max number of plots to cache in tmpdir (default = -1)
    copylimit=""   # Max number of parallel copies in total (default = -1)
    maxcopy=""     # Max number of parallel copies to same HDD (default = 1, unlimited = -1)
    memory=""      # Max shared/pinned memory in GiB (default = unlimited)

    ### Variables for the guru-mediation option. 
    ### It delays start of the plotting process if the system has rebooted (crashed) too often
    ### This is a known behaviour if a nvme is worn out, or the PSU is overloaded
    
    guru_meditation=false   
    max_reboots=2           # If the system has rebooted more than x times...
    lastminutes=120         # ...in the last y minutes...
    cooldowntime=15         # ...delay the start of the plotting process by z minutes
}



# Add help text
help_text() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --config FILE           Load a custom config from the specified file."
    echo "  --guru-meditation        Execute the sleep command with the cooldowntime"
    echo "                           if the number of reboots exceeds the limit."
    echo "  --help                   Display this help message and exit."
    echo ""
    echo "This script starts the plotting process for Chia."
    echo "It includes various features such as loading configs, managing plot files,"
    echo "and controlling the reboot count. The script also checks if the plotting"
    echo "directory is mounted, and mounts it if necessary. It removes temporary"
    echo "files that are no longer in use and copies finished *.plot files before start"
    echo "given parameters."
}

parse_arguments() {
# Check for the --config, --help, and --guru-meditation arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --config)
        config="$2"
        shift 2
        ;;
        --help)
        help_text
        exit 0
        ;;
        --guru-meditation)
        guru_meditation=true
        shift
        ;;
        *)
        echo "Unknown option: $1"
        exit 1
        ;;
    esac
done
}

# Function to load config from a file
load_config() {
    local config_path="$1"
    if [ -f "$config_path" ]; then
        echo "Loading config: $config_path"
        source "$config_path"
    else
        echo "Using default script parameters."
    fi
}


# Check if the specified directory is mounted, if not mount it
check_and_mount_dir() {
    local dir="$1"
    if ! mountpoint -q "$dir"; then
        echo -e "${CYAN}Mounting $dir using /etc/fstab configuration...${RESET}"
        mount "$dir"
    fi
}


# Manage plot files: Copy *.plot files and remove unused *.tmp files
manage_plot_files() {
    local plot_dir="$1"
    local dest_dir="$2"
    local plot_files
    
    # Check for and copy *.plot files to the destination
    if plot_files=$(ls "${plot_dir}"/*.plot 2>/dev/null); then
        if [ -f "$chia_plot_copy_bin" ]; then
            $chia_plot_copy_bin -d -t $dest_dir -- $plot_dir/*.plot
        else
            echo -e "${YELLOW}Warning: chia_plot_copy not found at $chia_plot_copy_bin${RESET}"
            echo "Please download chia_plot_copy from https://github.com/madMAx43v3r/chia-gigahorse"
            echo "Skipping moving of plot files"
        fi
    fi
    
    # Remove unused *.tmp files
    for tmp_file in "${plot_dir}"/*.tmp; do
        if [ ! -e "$tmp_file" ]; then
            continue
        fi

        if ! lsof "$tmp_file" >/dev/null 2>&1; then
            echo -e "${CYAN}removing $tmp_file${RESET}"
            rm "$tmp_file"
        fi
    done

    # If no plot files were found, this function ends here
    if [ -z "$plot_files" ]; then
        return
    fi

    sleep 1
}


# Implement guru meditation functionality
apply_guru_meditation() {
    local last_minutes="$1"
    local max_reboots="$2"
    local cooldown_time="$3"
    local guru_flag="$4"

    # Calculate the time window's starting point (y minutes ago)
    local start_time=$(date -d "-$last_minutes minutes" +"%Y-%m-%d %H:%M:%S")

    # Count the number of reboots in the time window
    local reboot_count=$(journalctl --since="$start_time" -o json | grep -o '"_BOOT_ID":"[^"]*' | sed 's/"_BOOT_ID":"//g' | sort -u | wc -l)

    # If the number of reboots exceeds the limit and --guru-meditation is issued, wait for z minutes before proceeding
    if [ "$reboot_count" -gt "$max_reboots" ] && [ "$guru_flag" = true ]; then
        echo "System has rebooted or crashed $reboot_count times in the last $last_minutes minutes. Delaying startup by $cooldown_time minutes."
        sleep $((cooldown_time * 60))
    else
        echo "No need to delay."
    fi
}

start_plotter() {
    local cmd="$plotterbin"

    # Add parameters to the command if they are set in the configuration
    [[ -n $level ]] && cmd+=" -C $level"
    [[ -n $port ]] && cmd+=" -x $port"
    [[ -n $count ]] && cmd+=" -n $count"
    [[ -n $device ]] && cmd+=" -g $device"
    [[ -n $ndevices ]] && cmd+=" -r $ndevices"
    [[ -n $tmpdir ]] && cmd+=" -t $tmpdir"
    [[ -n $tmpdir2 ]] && cmd+=" -2 $tmpdir2"
    [[ -n $tmpdir3 ]] && cmd+=" -3 $tmpdir3"
    [[ -n $finaldir ]] && cmd+=" -d $finaldir"
    [[ -n $dstport ]] && cmd+=" -z $dstport"
    [[ -n $waitforcopy ]] && cmd+=" -w"
    [[ -n $poolkey ]] && cmd+=" -p $poolkey"
    [[ -n $contract ]] && cmd+=" -c $contract"
    [[ -n $farmerkey ]] && cmd+=" -f $farmerkey"
    [[ -n $unique ]] && cmd+=" -Z"
    [[ -n $directio ]] && cmd+=" -D"
    [[ -n $streams ]] && cmd+=" -S $streams"
    [[ -n $chunksize ]] && cmd+=" -B $chunksize"
    [[ -n $maxtmp ]] && cmd+=" -Q $maxtmp"
    [[ -n $copylimit ]] && cmd+=" -A $copylimit"
    [[ -n $maxcopy ]] && cmd+=" -W $maxcopy"
    [[ -n $memory ]] && cmd+=" -M $memory"

    # Output the command with all parameters
    echo "Command to be executed: $cmd"

    # Now execute the command
    eval "$cmd"
}


# Main execution
main() {
    initialize_parameters  # Set default parameters first
    parse_arguments "$@"   # Parse command-line arguments

    # If a config file is specified and valid, it will override default parameters
    if [ -n "$config" ] && [ -f "$config" ]; then
        load_config "$config"
    fi

    check_and_mount_dir "${tmpdir}"
    manage_plot_files "${tmpdir}" "$dest_dir"  # Uncomment if needed
    apply_guru_meditation "$lastminutes" "$max_reboots" "$cooldowntime" "$guru_meditation"
    start_plotter
}


# Call main function with all script arguments
main "$@"

