#!/bin/bash

# Add color variables and bold
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"



interval=30 # Default rescan interval (in seconds)
label="CHIA"
LOG_FILE="lazy_init_log.txt"

# Function to print usage text
print_usage() {
    echo
    echo "Usage: $0 --label <label_of_chia_disks>) [--interval interval_seconds]"
    echo
    echo "Options:"
    #echo "  --mount-dir <mountpoint_of_chia_disks>  Count Chia plots in the specified directory."
    echo "  --label <label_of_chia_disks>           Count Chia plots in the disks starting with the specified label."
    echo "  --interval <interval_seconds>           Set the rescan interval in seconds (default: 60 seconds)."
    echo
}

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --interval)
            interval="$2"
            shift 2
            ;;
        --label)
            label="$2"
            shift 2
            ;;
        --help)
            print_usage
            exit 0
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit 1
            ;;
    esac
done


find_chia_disks() {
    if [ -n "$mount_dir" ]; then
        echo "$mount_dir*"
    elif [ -n "$label" ]; then
    # Fetching device name, label, and mount point
    lsblk -o NAME,label,MOUNTPOINT | awk -v label="$label" '$2 ~ "^"label {gsub("└─", "", $1); print "/dev/"$1, $3}'
    fi
}


# Function to find the maximum length of mount points
get_max_mount_length() {
    max_len=0
    for mp in "${DISK_MOUNT_POINTS[@]}"; do
        (( ${#mp} > max_len )) && max_len=${#mp}
    done
    echo $max_len
}



# Print initial table with dynamic column width
print_initial_table() {
    printf "\n${YELLOW}%-20s %-${mount_col_width}s %-20s %-20s %-20s${RESET}\n" "Disk" "Mount Point" "Inodes (start)" "Inodes (end)" "Status"
    for disk in "${!DISK_FREE_INODES[@]}"; do
        printf "%-20s %-${mount_col_width}s %-20s %-20s %-20s\n" "$disk" "${DISK_MOUNT_POINTS[$disk]}" "${DISK_FREE_INODES[$disk]}" "waiting.." "waiting.."
    done
}

# Print final table with dynamic column width
print_final_table() {
    printf "\n${YELLOW}%-20s %-${mount_col_width}s %-20s %-20s %-20s${RESET}\n" "Disk" "Mount Point" "Inodes (start)" "Inodes (end)" "Status"
    for disk in "${!DISK_FREE_INODES[@]}"; do
        CURRENT_FREE_INODES=$(tune2fs -l $disk | grep "Free inodes" | awk '{print $3}')
        if [[ "${DISK_FREE_INODES[$disk]}" != "$CURRENT_FREE_INODES" ]]; then
            DISK_STATUS[$disk]="Initializing"
        else
            DISK_STATUS[$disk]="Stable/Complete"
        fi
        printf "%-20s %-${mount_col_width}s %-20s %-20s %-20s\n" "$disk" "${DISK_MOUNT_POINTS[$disk]}" "${DISK_FREE_INODES[$disk]}" "$CURRENT_FREE_INODES" "${DISK_STATUS[$disk]}"
    done
    echo
}


get_disks() {
    # Get the list of chia disks
    chia_disks=$(find_chia_disks)
    chia_disks_count=$(echo "$chia_disks" | grep -v '^$' | wc -l) # Count non-empty lines
    echo "$chia_disks_count"
}


print_header(){
    local disk_count=$(get_disks)
    echo -e "${BOLD}ChiaGarden lazywhat${RESET}"
    echo -e "Monitoring inode initialization for ${CYAN}$disk_count${RESET} disks labeled ${CYAN}$label${RESET}" | tee -a $LOG_FILE
}

sleep_interval() {
    local countdown="$interval"
    echo -e
    while [ $countdown -gt 0 ]; do
        echo -ne "updating in ${CYAN}$countdown${RESET} seconds...\r"
        sleep 1
        ((countdown--))
    done
    echo -ne '\n'
}


clear
print_header

# Get initial state and find max mount point length
declare -A DISK_FREE_INODES
declare -A DISK_STATUS
declare -A DISK_MOUNT_POINTS
while read -r disk mountpoint; do
    DISK_FREE_INODES[$disk]=$(tune2fs -l $disk | grep "Free inodes" | awk '{print $3}')
    DISK_MOUNT_POINTS[$disk]=$mountpoint
    DISK_STATUS[$disk]="waiting.."
done < <(find_chia_disks)

max_mount_length=$(get_max_mount_length)
mount_col_width=$((max_mount_length + 2))


# Print initial table
print_initial_table | tee -a $LOG_FILE

# Wait for the specified interval
sleep_interval

# Print final table with updated information
clear
print_header
print_final_table | tee -a $LOG_FILE
