#!/bin/bash

subdir=""
default_command="echo -e"

GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"
RED="\033[31m"
BOLD="\033[1m"
RESET="\033[0m"

print_usage() {
    echo "Usage:"
    echo "./taco_list --mount-dir /path/to/dir [--subdir subdir_name] [--separator space|newline|csv] [--quotes] [--command '/path/to/command --']"
    echo "or"
    echo "./taco_list --label CHIA [--subdir subdir_name] [--separator space|newline|csv] [--quotes] [--command '/path/to/command --']"
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --mount-dir)
            mount_dir="$2"
            shift 2
            ;;
        --label)
            label="$2"
            shift 2
            ;;
        --subdir)
            subdir="$2"
            shift 2
            ;;
        --separator)
            separator="$2"
            shift 2
            ;;
        --command)
            default_command="$2"
            shift 2
            ;;
        --quotes)
            use_quotes=true
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit 1
            ;;
    esac
done

if [ -z "$mount_dir" ] && [ -z "$label" ]; then
    label="CHIA"
fi

if [ -n "$mount_dir" ] && [ -n "$label" ]; then
    echo -e "${RED}Error: Both --mount-dir and --label cannot be used at the same time.${RESET}"
    print_usage
    exit 1
fi


get_disks_from_mount() {
    find "$1" -mindepth 1 -maxdepth 1 -type d | sed "s|$|/$2|"
}

get_disks_from_label() {
    df -h | grep -E "^/dev/.*$1" | awk -v s="$2" '{print $6"/"s}'
}

add_quotes() {
    echo "$1" | awk '{print "\"" $0 "\""}'
}

if [ -n "$mount_dir" ]; then
    dest_disks=$(get_disks_from_mount "$mount_dir" "$subdir")
elif [ -n "$label" ]; then
    dest_disks=$(get_disks_from_label "$label" "$subdir")
    if [ -z "$dest_disks" ]; then
        echo -e "${RED}Error: No disks found with label $label.${RESET}"
        exit 1
    fi
fi

[ "$use_quotes" == "true" ] && dest_disks=$(add_quotes "$dest_disks")


# Default separator to 'newline' if not specified
[ -z "$separator" ] && separator="newline"

case $separator in
    "space")
        dest_disks=$(echo "$dest_disks" | tr '\n' ' ')
        ;;
    "csv")
        dest_disks=$(echo "$dest_disks" | tr '\n' ',' | sed 's/,$//')
        ;;
    *)
        # Treat any unrecognized separator as newline
        ;;
esac

# Be verbose about the command unless it's the default
if [[ "$default_command" != "echo -e" ]]; then
    echo -e "${CYAN}\nExecuting command: \n$default_command $dest_disks\n${RESET}"
fi

$default_command "$dest_disks"
